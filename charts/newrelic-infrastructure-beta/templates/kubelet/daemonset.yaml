{{- if (.Values.kubelet.enabled) }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: {{ .Release.Namespace }}
  labels: {{ include "newrelic.labels" . | nindent 4 }}
  name: {{ template "newrelic.fullname" . }}-kubelet
  {{- with .Values.kubelet.annotations }}
  annotations: {{ toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- with .Values.updateStrategy }}
  updateStrategy: {{ toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "newrelic.name" . }}-kubelet
      app.kubernetes.io/instance: {{ .Release.Name }}-kubelet
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/name: {{ include "newrelic.name" . }}-kubelet
        app.kubernetes.io/instance: {{ .Release.Name }}-kubelet
        {{- with .Values.podLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        mode: {{ include "newrelic.mode" . }}
    spec:
      {{- with .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "newrelic.serviceAccountName" . }}
      containers:
        - name: kubelet
          image: {{ .Values.images.scraper.repository }}:{{ .Values.images.scraper.tag | default .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.images.scraper.pullPolicy }}
          securityContext:
            runAsUser: {{ .Values.runAsUser }}
            runAsGroup: {{ .Values.runAsGroup }}
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:
            - name: "NRI_KUBERNETES_HTTPSERVERPORT"
              value: "8003"
            - name: "NRI_KUBERNETES_CLUSTERNAME"
              value: {{ include "newrelic.cluster" . | required "cluster name must be set" }}
            {{- if .Values.verboseLog }}
            - name: NRI_KUBERNETES_VERBOSE
              value: "1"
            {{- end }}
            - name: "NRI_KUBERNETES_NODENAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
            # Required to connect to the kubelet
            - name: "NRI_KUBERNETES_NODEIP"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "status.hostIP"
            {{- with .Values.kubelet.extraEnv }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.kubelet.extraEnvFrom }}
          envFrom: {{ toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: nri-kubernetes-config
              mountPath: /etc/newrelic-infra/integrations.d/nri-kubernetes-config.yml
              subPath: nri-kubernetes-config.yml
            - mountPath: /tmp
              name: tmpfs-tmp
            {{- with .Values.kubelet.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.kubelet.resources }}
          resources: {{ toYaml . | nindent 12 }}
          {{- end }}
        - name: agent
          image: {{ .Values.images.agent.repository }}:{{ .Values.images.agent.tag }}
          command: [ "/sbin/tini", "--", "/usr/bin/newrelic-infra" ]
          imagePullPolicy: {{ .Values.images.agent.pullPolicy }}
          securityContext:
            {{- if .Values.privileged }}
            privileged: true
            {{- else }}
            runAsUser: {{ .Values.runAsUser }}
            runAsGroup: {{ .Values.runAsGroup }}
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            {{- end }}
          ports:
            - containerPort: 8003
          env:
            - name: "NRIA_OVERRIDE_HOSTNAME_SHORT"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
            - name: "NRIA_FEATURES"
              value: "docker_enabled:false"
            - name: "NRIA_HTTP_SERVER_ENABLED"
              value: "true"
            - name: "NRIA_HTTP_SERVER_PORT"
              value: "8003"
            - name: NRIA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "newrelic.licenseSecretName" . | required "licenseKey or customSecretName and customSecretLicenseKey must be set" }}
                  key: {{ include "newrelic.licenseSecretKey" . | required "licenseKey or customSecretName and customSecretLicenseKey must be set" }}
            {{- with .Values.eventQueueDepth }}
            - name: "NRIA_EVENT_QUEUE_DEPTH"
              value: {{ .| quote }}
            {{- end }}
            {{- /* Ugly hack to check if .Values.enableProcessMetrics is defined: */}}
            {{- if ne (print .Values.enableProcessMetrics) "<nil>" }}
            - name: "NRIA_ENABLE_PROCESS_METRICS"
              value: {{ .Values.enableProcessMetrics | quote }}
            {{- end }}
            {{- if (include "newrelic.nrStaging" .) }}
            - name: "NRIA_STAGING"
              value: "true"
            {{- end }}
            - name: "NRI_KUBERNETES_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
            {{- if .Values.useNodeNameAsDisplayName }}
            - name: "NRIA_DISPLAY_NAME"
            {{- if .Values.prefixDisplayNameWithCluster }}
              value: "{{ include "newrelic.cluster" . }}:$(NRI_KUBERNETES_NODE_NAME)"
            {{- else }}
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
            {{- end }}
            {{- end }}
            {{- if (include "newrelic.customAttributes" .) }}
            - name: "NRIA_CUSTOM_ATTRIBUTES"
              value: {{ include "newrelic.customAttributes" . }}
            {{- end }}
            {{- if .Values.verboseLog }}
            - name: NRIA_VERBOSE
              value: "1"
            {{- end }}
            {{- with .Values.logFile }}
            - name: NRIA_LOG_FILE
              value: {{ . }}
            {{- end }}
            {{- if not .Values.privileged }}
            - name: "NRIA_OVERRIDE_HOST_ROOT"
              value: ""
            - name: "NRIA_IS_SECURE_FORWARD_ONLY"
              value: "true"
            {{- end }}
            {{- with .Values.kubelet.extraEnv }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.kubelet.extraEnvFrom }}
          envFrom: {{ toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if .Values.config }}
            - name: config
              mountPath: /etc/newrelic-infra.yml
              subPath: newrelic-infra.yml
            {{- end }}
            {{- if .Values.integrations_config }}
            - name: nri-integrations-cfg-volume
              mountPath: /etc/newrelic-infra/integrations.d/
            {{- end }}
            {{- if .Values.privileged }}
            - name: dev
              mountPath: /dev
            {{- if and (.Values.openshift.enabled) (eq .Values.openshift.version "4.x") }}
            - name: host-crio-socket
              mountPath: /var/run/crio.sock
            {{- else }}
            - name: host-docker-socket
              mountPath: /var/run/docker.sock
            {{- end }}
            - name: log
              mountPath: /var/log
            - name: host-volume
              mountPath: /host
              readOnly: true
            {{- else }}
            - mountPath: /var/db/newrelic-infra/data
              name: tmpfs-data
            - mountPath: /var/db/newrelic-infra/user_data
              name: tmpfs-user-data
            - mountPath: /tmp
              name: tmpfs-tmp
            {{- end }}
            {{- with .Values.kubelet.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.kubelet.resources }}
          resources: {{ toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        {{- if .Values.privileged }}
        - name: dev
          hostPath:
            path: /dev
        {{- if and (.Values.openshift.enabled) (eq .Values.openshift.version "4.x") }}
        - name: host-crio-socket
          hostPath:
            path: /var/run/crio.sock
        {{- else }}
        - name: host-docker-socket
          hostPath:
            path: /var/run/docker.sock
        {{- end }}
        - name: log
          hostPath:
            path: /var/log
        - name: host-volume
          hostPath:
            path: /
        {{- else }}
        - name: tmpfs-data
          emptyDir: {}
        - name: tmpfs-user-data
          emptyDir: {}
        {{- end }}
        - name: tmpfs-tmp
          emptyDir: {}
        - name: nri-kubernetes-config
          configMap:
            name: {{ template "newrelic.fullname" . }}-kubelet
            items:
              - key: nri-kubernetes-config.yml
                path: nri-kubernetes-config.yml
        {{- if .Values.config }}
        - name: config
          configMap:
            name: {{ template "newrelic.fullname" . }}-agent
            items:
              - key: newrelic-infra.yml
                path: newrelic-infra.yml
        {{- end }}
        {{- if .Values.integrations_config }}
        - name: nri-integrations-cfg-volume
          configMap:
            name: {{ template "newrelic.fullname" . }}-integrations-cfg
        {{- end }}
        {{- with .Values.kubelet.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with $.Values.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- if .Values.kubelet.affinity.nodeAffinity }}
      affinity:
        nodeAffinity: {{ .Values.kubelet.affinity.nodeAffinity | toYaml | nindent 10 }}
      {{- else if include "newrelic.fargate" . }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: eks.amazonaws.com/compute-type
                    operator: NotIn
                    values:
                      - fargate
      {{- end }}
      {{- with .Values.kubelet.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.kubelet.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
