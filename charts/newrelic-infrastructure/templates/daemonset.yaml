{{- if and (include "newrelic.areValuesValid" .) .Values.enableLinux }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "newrelic.labels" . | nindent 4 }}
  name: {{ template "newrelic.fullname" . }}
  {{- if .Values.daemonSet.annotations }}
  annotations:
    {{- toYaml .Values.daemonSet.annotations | nindent 4 }}
  {{- end }}
spec:
  updateStrategy:
    {{- with .Values.updateStrategy }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
  selector:
    matchLabels:
      app: {{ template "newrelic.name" . }}
      release: {{.Release.Name }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8}}
    {{- end }}
      labels:
        app: {{ template "newrelic.name" . }}
        release: {{.Release.Name }}
        {{- with .Values.podLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        mode: {{ template "newrelic.mode" . }}
    spec:
      serviceAccountName: {{ template "newrelic.serviceAccountName" . }}
      {{- if .Values.privileged }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ template "newrelic.name" . }}
          image: {{ template "newrelic.image" . }}
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          securityContext:
            {{- if .Values.privileged }}
            privileged: true
            {{- else }}
            runAsUser: {{ .Values.runAsUser | default 1000 }}
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            {{- end }}
          env:
            - name: NRIA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  {{- if (include "newrelic.licenseKey" .) }}
                  name: {{ template "newrelic.fullname" . }}-config
                  key: license
                  {{- else }}
                  name: {{ include "newrelic.customSecretName" . }}
                  key: {{ include "newrelic.customSecretLicenseKey" . }}
                  {{- end }}
            - name: "CLUSTER_NAME"
              value: {{ include "newrelic.cluster" . }}
            {{- with .Values.disableKubeStateMetrics }}
            - name: "DISABLE_KUBE_STATE_METRICS"
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.kubeStateMetricsUrl }}
            - name: "KUBE_STATE_METRICS_URL"
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.kubeStateMetricsPodLabel }}
            - name: "KUBE_STATE_METRICS_POD_LABEL"
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.kubeStateMetricsTimeout }}
            - name: TIMEOUT
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.kubeStateMetricsScheme }}
            - name: "KUBE_STATE_METRICS_SCHEME"
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.kubeStateMetricsPort }}
            - name: "KUBE_STATE_METRICS_PORT"
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.kubeStateMetricsNamespace }}
            - name: "KUBE_STATE_METRICS_NAMESPACE"
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.etcdTlsSecretName }}
            - name: ETCD_TLS_SECRET_NAME
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.etcdTlsSecretNamespace }}
            - name: ETCD_TLS_SECRET_NAMESPACE
              value: {{ . | quote }}
            {{- end }}
            {{- if and (.Values.openshift.enabled) (eq .Values.openshift.version "4.x") }}
            # OpenShift defaults
            - name: "ETCD_ENDPOINT_URL"
              value: {{ .Values.etcdEndpointUrl | quote | default "https://localhost:9979" }}
            - name: "API_SERVER_ENDPOINT_URL"
              value: {{ .Values.apiServerEndpointUrl | quote | default "https://localhost:6443" }}
            - name: "SCHEDULER_ENDPOINT_URL"
              value: {{ .Values.schedulerEndpointUrl | quote | default "https://localhost:10259" }}
            - name: "CONTROLLER_MANAGER_ENDPOINT_URL"
              value: {{ .Values.controllerManagerEndpointUrl | quote | default "https://localhost:10257" }}
            {{- else }}
            {{- with .Values.etcdEndpointUrl }}
            - name: "ETCD_ENDPOINT_URL"
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.apiServerEndpointUrl }}
            - name: "API_SERVER_ENDPOINT_URL"
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.schedulerEndpointUrl }}
            - name: "SCHEDULER_ENDPOINT_URL"
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.controllerManagerEndpointUrl }}
            - name: "CONTROLLER_MANAGER_ENDPOINT_URL"
              value: {{ . | quote }}
            {{- end }}
            {{- end }}
            {{- with .Values.apiServerSecurePort }}
            - name: "API_SERVER_SECURE_PORT"
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.eventQueueDepth }}
            - name: "NRIA_EVENT_QUEUE_DEPTH"
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.discoveryCacheTTL }}
            - name: "DISCOVERY_CACHE_TTL"
              value: {{ . | quote }}
            {{- end }}
            {{- /* Ugly hack to check if .Values.enableProcessMetrics is defined: */}}
            {{- if ne (print .Values.enableProcessMetrics) "<nil>" }}
            - name: "NRIA_ENABLE_PROCESS_METRICS"
              value: {{ .Values.enableProcessMetrics | quote }}
            {{- end }}
            {{- if (include "newrelic.nrStaging" .) }}
            - name: "NRIA_STAGING"
              value: "true"
            {{- end }}
            - name: "NRK8S_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
            {{- if .Values.useNodeNameAsDisplayName }}
            - name: "NRIA_DISPLAY_NAME"
            {{- if .Values.prefixDisplayNameWithCluster }}
              value: "{{ include "newrelic.cluster" . }}:$(NRK8S_NODE_NAME)"
            {{- else }}
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
            {{- end }}
            {{- end }}
            {{- with .Values.customAttributes }}
            - name: "NRIA_CUSTOM_ATTRIBUTES"
              value: {{ . | quote }}
            {{- end }}
            - name: "NRIA_PASSTHROUGH_ENVIRONMENT"
              value: "KUBERNETES_SERVICE_HOST,KUBERNETES_SERVICE_PORT,CLUSTER_NAME,CADVISOR_PORT,NRK8S_NODE_NAME,KUBE_STATE_METRICS_URL,KUBE_STATE_METRICS_POD_LABEL,TIMEOUT,ETCD_TLS_SECRET_NAME,ETCD_TLS_SECRET_NAMESPACE,API_SERVER_SECURE_PORT,KUBE_STATE_METRICS_SCHEME,KUBE_STATE_METRICS_PORT,KUBE_STATE_METRICS_NAMESPACE,SCHEDULER_ENDPOINT_URL,ETCD_ENDPOINT_URL,CONTROLLER_MANAGER_ENDPOINT_URL,API_SERVER_ENDPOINT_URL,DISABLE_KUBE_STATE_METRICS,DISCOVERY_CACHE_TTL"
            {{- if .Values.verboseLog }}
            - name: NRIA_VERBOSE
              value: "1"
            {{- end }}
            {{- with .Values.logFile }}
            - name: NRIA_LOG_FILE
              value: {{ . | quote }}
            {{- end }}
          volumeMounts:
            {{- if .Values.config }}
            - name: config
              mountPath: /etc/newrelic-infra.yml
              subPath: newrelic-infra.yml
            {{- end }}
            {{- if .Values.integrations_config }}
            - name: nri-integrations-cfg-volume
              mountPath: /etc/newrelic-infra/integrations.d/
            {{- end }}
            {{- if .Values.privileged }}
            - name: dev
              mountPath: /dev
            {{- if and (.Values.openshift.enabled) (eq .Values.openshift.version "4.x") }}
            - name: host-crio-socket
              mountPath: /var/run/crio.sock
            {{- else }}
            - name: host-docker-socket
              mountPath: /var/run/docker.sock
            {{- end }}
            - name: log
              mountPath: /var/log
            - name: host-volume
              mountPath: /host
              readOnly: true
            {{- else }}
            - mountPath: /var/db/newrelic-infra/data
              name: tmpfs-data
            - mountPath: /var/db/newrelic-infra/user_data
              name: tmpfs-user-data
            - mountPath: /tmp
              name: tmpfs-tmp
            - mountPath: /var/cache/nr-kubernetes
              name: tmpfs-cache
            {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        {{- if .Values.privileged }}
        - name: dev
          hostPath:
            path: /dev
        {{- if and (.Values.openshift.enabled) (eq .Values.openshift.version "4.x") }}
        - name: host-crio-socket
          hostPath:
            path: /var/run/crio.sock
        {{- else }}
        - name: host-docker-socket
          hostPath:
            path: /var/run/docker.sock
        {{- end }}
        - name: log
          hostPath:
            path: /var/log
        - name: host-volume
          hostPath:
            path: /
        {{- else }}
        - name: tmpfs-data
          emptyDir: {}
        - name: tmpfs-user-data
          emptyDir: {}
        - name: tmpfs-tmp
          emptyDir: {}
        - name: tmpfs-cache
          emptyDir: {}
        {{- end }}
        {{- if .Values.config }}
        - name: config
          configMap:
            name: {{ template "newrelic.fullname" . }}
            items:
            - key: newrelic-infra.yml
              path: newrelic-infra.yml
        {{- end }}
        {{- if .Values.integrations_config }}
        - name: nri-integrations-cfg-volume
          configMap:
            name: {{ template "newrelic.fullname" . }}-integrations-cfg
        {{- end }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- if .Values.nodeAffinity }}
      affinity:
        nodeAffinity:
          {{- .Values.nodeAffinity | toYaml | nindent 10 }}
      {{- else if include "newrelic.fargate" . }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: eks.amazonaws.com/compute-type
                    operator: NotIn
                    values:
                      - fargate
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
